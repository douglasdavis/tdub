"""
Module to help running batch jobs
"""

# stdlib
import logging
import glob
import os
import shutil
from typing import List, Union, Optional, IO
from pathlib import PosixPath

# tdub
from tdub.utils import PathLike, FileLike

log = logging.getLogger(__name__)

BNL_CONDOR_HEADER = """## -*- dear emacs, mode: conf -*-
## Condor Submission; generated by tdub.batch

Universe        = vanilla
notification    = {notification}
notify_user     = {email}
GetEnv          = True
Executable      = {exe}
Output          = {workspace}/out/$(cluster).$(process)
Error           = {workspace}/err/$(cluster).$(process)
Log             = {workspace}/log/$(cluster).$(process)
request_memory  = {memory}
"""


def create_condor_workspace(name: PathLike, exist_ok=False) -> PosixPath:
    """Create a condor workspace given a name

    This will create a new directory containing `log`, `out`, and
    `err` directories inside. The `workspace` argument to the
    :py:func:`~condor_header` function assumes creation of a workspace
    via this function.

    Missing parent directories will always be created.

    Parameters
    ----------
    name : str or os.PathLike
        the desired filesystem path for the workspace
    exist_ok : bool
        if False, raises OSError if the directory exists

    Raises
    ------
    OSError
        if the filesystem path exists and exist_ok is False

    Returns
    -------
    pathlib.PosixPath
        filesystem path to the workspace

    Examples
    --------
    >>> import tdub.batch as tb
    >>> import shutil
    >>> ws = tb.create_condor_workspace("./some/ws")
    >>> with open(ws / "condor.sub", "w") as f:
    ...     header = tb.condor_header(ws, shutil.which("tdub"), file=f)
    ...     tb.add_condor_arguments("train-single ......", f)

    """
    ws = PosixPath(name).resolve()
    ws.mkdir(exist_ok=exist_ok, parents=True)
    (ws / "log").mkdir()
    (ws / "err").mkdir()
    (ws / "out").mkdir()
    return ws


def condor_header(
    workspace: PathLike,
    exe: FileLike,
    memory: str = "2GB",
    email: str = "ddavis@phy.duke.edu",
    notification: str = "Error",
    file: IO = None,
) -> str:
    """Create the header of a condor submission script

    Parameters
    ----------
    workspace : str or os.PathLike
        the filesystem directry where the workspace is
    exe : str or os.PathLike
        the path of the executable that condor will run
    memory : str
        the requested memory
    email : str
        the email to send updates to (if any)
    notification : str
        the condor notification argument
    file : io.TextIOWrapper, optional
        if not None, write the string to this file

    Returns
    -------
    str
        the submission script header

    Examples
    --------
    >>> import tdub.batch as tb
    >>> import shutil
    >>> ws = tb.create_condor_workspace("./some/ws")
    >>> with open(ws / "condor.sub", "w") as f:
    ...     header = tb.condor_header(ws, shutil.which("tdub"), file=f)
    ...     tb.add_condor_arguments("train-single ......", f)

    """
    res = BNL_CONDOR_HEADER.format(
        workspace=os.path.abspath(workspace),
        exe=exe,
        memory=memory,
        email=email,
        notification=notification,
    )
    if file is not None:
        print(res, file=file)
    return res


def add_condor_arguments(arguments: str, file: IO) -> None:
    """Add an arguments line to a condor submission script

    the `arguments` argument is prefixed with `"Arguments = "` and
    written to `file`.

    Parameters
    ----------
    arguments : str
        the arguments line
    file : io.TextIOWrapper
        the open file stream

    Examples
    --------
    >>> import tdub.batch as tb
    >>> import shutil
    >>> ws = tb.create_condor_workspace("./some/ws")
    >>> with open(ws / "condor.sub", "w") as f:
    ...     header = tb.condor_header(ws, shutil.which("tdub"), file=f)
    ...     tb.add_condor_arguments("train-single ......", f)

    """
    file.write("\n")
    file.write(f"Arguments = {arguments}\n")
    file.write(f"Queue\n")
